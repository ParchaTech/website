---
interface Props {
  text: string;
  type: "primary" | "secondary" | "link" | "full-width";
  href?: string;
  backgroundColor?: string;
  disabled?: boolean;
  externalLink?: boolean;
}

const { text, type, href, backgroundColor, disabled, externalLink } =
  Astro.props;

const buttonClasses = {
  primary: "bg-primary text-secondary",
  secondary: "bg-secondary text-primary",
  link: "btn--link",
  "full-width": "btn--full-width",
};
---

<a
  class:list={[
    "btn w-1/2 md:w-full",
    buttonClasses[type],
    { "pointer-events-none cursor-default": disabled },
  ]}
  href={href}
  target={externalLink ? "_blank" : "_self"}
  rel="noreferrer"
>
  <div
    class="relative flex h-8 w-full items-center justify-center overflow-hidden text-center leading-8"
  >
    <div class="animation absolute top-0 w-full">
      <span class="block">{text}</span>
      <span class="block">{text}</span>
    </div>
  </div>
</a>

<style define:vars={{ backgroundColor }}>
  .btn {
    display: block;
    max-width: 180px;
    padding: 8px 0px;
    font-size: 1rem;
    font-family: var(--primary-font);
    font-weight: bold;
    text-decoration: none;
    text-align: center;
    cursor: pointer;
    user-select: none;
  }

  .btn--link {
    padding: 0;
    font-size: 1rem;
    font-weight: normal;
    color: var(--primary-color);
    font-family: var(--primary-font);
  }

  .btn--link .animation {
    transform: none;
    text-decoration: underline;
  }

  .btn--full-width {
    font-size: 18px;
    width: 100%;
    max-width: 100%;
    text-transform: uppercase;
    color: var(--secondary-color);
    background-color: var(--backgroundColor);
  }

  .animation {
    transform: translateY(0);
    transition: transform 0.3s ease-in-out;
  }

  .animation:hover {
    transform: translateY(-50%);
  }
</style>
